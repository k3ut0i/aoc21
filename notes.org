* TODO Day 01
  - Note taken on [2021-12-19 Sun 16:50] \\
    I am getting a repeat count for the second part of the answer.
    There is some problem with boundary condition. Fix this.
  I just need to iterate through the list once. So a simple linked list would suffice.
  - Since creating the list would give me the reverse of it, I need to count the decreasing depth.
    + Hmm, it would seem that ~std::list~ allows iterating from the back too(doubly linked list).
      I will just iterate from the back for simplicity.

* DONE Day 02
  In the previous problem, when trying to read numbers sequentially, I did ~filestream >> num~. I want to do this for a complicated data structure ~filestream >> data~. What should I define for this to work?
  <2021-12-19 Sun> Got it to work. There is a bug. If the eof does not occur directly after the data, i.e., there is an extra newline, [[file:src/day02.cc::std::list<struct command> read_commands(std::string filename) {][~read_commands~]], then the program crashes trying to parse this whitespace into a ~struct command~. Now how do I tell if all that is left in the stream is whitespace?
  <2021-12-20 Mon> Solved the whitespace before eof problem by just ~peek~ and ~get~ while the ~peek~ satisfies ~isspace~.

* DONE Day 03
  I have solved a similar problem before on Average of several DNA sequences. 
  I did not use any ~lambdas~. There are instances to use ~map~ on ~std::list~, but I seem to be just using ~for~ loops.
  <2021-12-20 Mon> Something is segfaulting in part2; probably some dereferencing a bitset.
  <2021-12-21 Tue> I was deleting nodes in a list while traversing. So when I deleted a node and then used it to get the next node, the result was a segfault.

* DONE Day 04
  Finished coding the logic. Cards are not being marked at all. Needs debugging.
  - The set of marked indices is not being updated. What am I missing?
    + figured it out. I should have passed ranged over state using ~auto &~. By just using ~auto~ I was not propagating changes back to state.
  - Similar to previous day, I seem to be struggling with deleting nodes of a list while traversing it.
  I would not have struggled this much if I just tried to simulate the whole process of find the last card in my head.
  
* DONE Day 05
  Finding the density of lines.
  - I am loving the ~operator>>~ to parse the incoming data. Feels quite like Haskell ~ReadS~ parsing.
  - Took a couple of tries to get the line stepping logic to get right.

* DONE Day 06
  I am having trouble using header files and libraries.
  - linker is complaining of unable to resolve the function reference. Is there a problem with function name or template instantiation?
    + I almost stumbled upon the answer. Since a templated function compiled into instantiated versions where it is required, we need to know it's uses before compiling the object file. Thus we can only use it if the definition is within the translation unit of it's use. We can do this if the function is defined within the header file. We cannot enumerate all instances of template function; thus every instantiation might be compiled again anyway. So this is not much of a disadvantage to the compilaiton process.
  For the second part, I tried to find a equation to describe the process similar to fibonacci rabbits which I remembered from [[rosalind.info]]. I did not succeed. Since fish that are on the same reproductive cycle behave the same, we can just keep track of one and keep a count of how many there are.

* DONE Day 07
  Main idea is to sort the positions and iterate from one end to the other. If we are at a position Pc and PL, PR are positions left and right of Pc. The fuel cost for Pc is sum(PR)-size(PR)*Pc + size(PL)*Pc-sum(PL).
  I need to keep track of these sections properly.
  Since in the above equation we have the only variable quantity as (size(PL) - size(PR))*Pc, this part has maximum and minimum only at the boundaries. Thus we only need to consider the positions given. It will never be inbetween.
  The total sum(PR)+sum(PL)+sum(Current) must be constant; and size(PL)+size(PR)+1 must be the total size. These invariants should help manage all the variables.
  <2021-12-25 Sat> After struggling with this a while, I just went with a brute force solution. It is O(n^2) rather that O(nlogn) but the N is small enough so runtime does not really matter. But I do feel defeated.
  For the second part the cost function is quadratic w.r.t the distance. Hence the optimal position is not at the ends but in between the nodes. So I am iterating every point in range.

* TODO Day 08
  After determining unique numbers, we have to check all inputs and determine which configuration is valid.
  It should even be possible to brute force this. Have to check 1 million cases approximately; but it could be done. Maybe I will try it after optimal solution; else I would not be motivated to do a better one.
  <2021-12-26 Sun> Test case for finding the correct permutation worked. I need to decode and add the numbers now.
  <2021-12-27 Mon> I just went with brute-force searching. It did not even take a couple of seconds even with debug flags set.
  #+begin_example
    real    0m0.281s
    user    0m0.277s
    sys     0m0.004s
  #+end_example
** TODO Optimal solution
   Must atleast try a optimal solution. I always try to skirt around implementing a backtracking search in imperative languages.

* DONE Day 09
  First part is simple enough. Iterate over every cell and check some property.
  Second part is something new. I need to start with a deep point and keep marking the basin untill all boundaries are reached. It is like finding connect components of a given graph
  - The neighbours closure is was very buggy.
  <2022-01-02 Sun> Finally debugged this. This is the same transitive closure problem that is disguised using depths that do not really matter. I generate a simple image to visualize the regions a bit too.
  #+NAME: basins-grayscale-colored
  [[./gen/day09_basins.pgm]]

* TODO Day 10
  I used a stack to track the open characters. If the closing char doesn't match the top open char on the stack then it is corrupt. If there are still open chars left in the stack after the input if over then it is incomplete. So we can get all requirements in one iteration of the input line.
  <2022-01-02 Sun> For some reason the second part is giving me an incorrect answer, despite the given example working perfectly.

* DONE Day 11
  Since both test case and actual input have 10x10 grids, I will just hand code it into the answer rather than try to figure it out from the file.
  Simultaneous flashing was a bit tricky to get right. I again used a stack to keep track of neighbours who might flash. No wonder a stack is always suggested for depth first search problems. It makes the mental model very clear. 

* DONE Day 12
  An exhaustive path search problem with a twist.
  - There are two kinds of nodes: small, large.
  - small must be visited atmost once, large can be visited any number of times.

  So If two large nodes are directly connected we have a loop and hence it will result in infinite number of paths. So input will not contain two large nodes connected.
  The search space could be massive, hence I should try to an /orderly/ sweep and keep a record of choice points at each node and by backtracking we can get all the paths.

  <2022-01-04 Tue> +Choices should not be a stack, it should be a map. The partial path should be tracked by a stack separately, otherwise updating the choices state at each node will be cumbersome.+
  <2022-01-05 Wed> The ~<algorithm>~ library is not easy to use. Parts of it are in C++14, C++17 and C++20. Some of them work by default on one compiler and some work with only specific flags enabled and some do not work at all.
  #+begin_example
    Old value = std::set with 4 elements = {[0] = "b", [1] = "c", [2] = "end", [3] = <error: Cannot access memory at address 0x4>}
    New value = std::set with 4 elements = {[0] = "b", [1] = "c", [2] = "end", [3] = <error: Cannot access memory at address 0x4>}
  #+end_example
  Why is get_vals returing a set with 4 elements when looking at choices for "A"?
  I made a mistake in choosing to represent Choices as a map. Since the nodes on the path are can be repeated, at each point we might have different choices. If we reach 'A' two times in the path, we will have different choices in those to instances.
  What a mess. I should have just used a list to maintain a path with choices data attached to each node. Wasted trying stack, map and multimap. I guess when exploring the problem space itself, it is better use as generic a method as possible. We can narrow and optimize after getting it to work.
  Now the second part has a even bigger twist. Exactly one of the smaller nodes can be visited twice. Can I deal with this using code already written? i.e., can I add an extra dummy node for each case with same connections? Since the number of nodes are small, we can just try this method for each node and then count the paths.
  The above strategy will not work directly as the paths generated after adding extra node to the graph need no actually have the extra node. So we need to only count the extra paths if the extra node is in it. So we cannot just use part1 code directly. Some changes are needed.
  <2022-01-06 Thu> At every point of the path small caves will also be added to choice points unless a small cave has already been choosen.
  Found an error: _start kj dc HN kj dc end_ Why is this path being generated? When I select a new node, I am not considering it it already exists before deciding the choices. I am just checking the choices already made.
  Finally leveraged most of the path finding code from part1 to solve part2 by just allowing small cave choices unless a repeat already happened. I can make it better by keeping a state variable of small cave choices instead of counting them every iteration. Also count_paths2 can just be written with count_paths by toggling a input value or template value. Too lazy to do it now.
  #+begin_example
    4167
    98441

    real    0m7.444s
    user    0m7.438s
    sys     0m0.000s
  #+end_example

* DONE Day 13
  A direct simulation. Started doing some object oriented stuff again. A class, constructor and methods on the simulated object. I used a ~const~ function qualified for the first time.
  #+begin_example
    ..##..##...##....##.####.####.#..#.#..#.
    ...#.#..#.#..#....#.#....#....#.#..#..#.
    ...#.#....#..#....#.###..###..##...#..#.
    ...#.#.##.####....#.#....#....#.#..#..#.
    #..#.#..#.#..#.#..#.#....#....#.#..#..#.
    .##...###.#..#..##..####.#....#..#..##..
  #+end_example
  
* DONE Day 14
  Solved the first part using a direct simulation. The second part requires more as it is taking exponential time and memory. There are finite patterns here. Hence there will be big parts of the chain just repeating in time and space.
  The polymer expansion is contained, i.e., an expansion only happens b/w two elements. Say there is a rule ~AB -> C~. Then ~AB~ transforms to ~ACB~. Thus if we take the whole string as a set of all successive two element pairs, then we can write this transformation as ~{AB}~ to ~{AC, CB}~. Since if only N elements are present we have to just keep track of N^2 pairs, we can iterate in constant space.
  Ends of the polymer chain are proving a bit of problem for boundry conditions. I kept track of them and took them into account when counting the characters.

* TODO Day 15
  This seems to be an optimal path finding problem. I am having trouble visualizing an algorithm since this is an undirected graph. I cannot enumerate all possible paths due to presence of cycles and just the size of the input. Without any backing(i.e., directed graph) a NxN path will have 2^N paths and for N=100, we have above 10^30 such paths. So for any case we need a heuristic to narrow the options for each point.
  Let O represent origin, i.e., top-left corner. Now let ~mrp : NxN ->N~ be the a function from the set of points to total risk which calculates the minimal risk of travelling from O to a point P.
  ~mrp(P) = min{mrp(Ni)+Ni|Ni is a neighbour of P}~
  <2022-01-10 Mon> I am not getting the boundary conditions and data structure corrent.
  - I should use a imperative data structure instead of recursive function calls.
  - I should follow a build up instead of backward search.
  - Inital value must be set or deal with somehow.
  - Should I queue the ends somehow?

  <2022-01-11 Tue> I am not sure what exactly my ~iterative_flow~ algorithm is called. It is essentially a breadth-first search. We start by checking the nodes reachable with smallest cost and start increasing the cost until we reach the required node. I got this working for the test case, but it is taking too long for the actual input. It could be faster by using hashed(Did not really improve things by much) sets and maps and with -O2 optimization instead of current debugging, but I suppose a better algorithm is needed here.
  The ~iterative_flow~ will not work for the second case. I definitely need a good algorithm. There are several for finding shortest paths, I might as well try a few and analyze them.
** DONE Dijsktra
   I am trying to represent unvisited nodes as a priority queue. The ~priority_queue~ in ~libstdc++~ does not have update function which is needed to update the cost of neighbouring nodes. I am trying to implement is using ~std::set~ with a custom comparision function. Now we can always get the top using ~*pq.begin()~, update is ~find~ and assignment, but will the set still be sorted after this update?
** Astar

* DONE Day 16
  A parsing problem on bit level.
  - +I am using ~union~ non-trivially for the first time.+
    + Using union in a recursive data structure is a lot more problematic.
  - +Parsing is working for tests cases 1-5, but for 6, 7 and final cases I am somehow reaching EOF.+
    + I did not count all the bits used accurately.

* TODO Day 17      
  - For any y-component of initial velocity yv, at time t=2*yv+1 we will be at y=0 and since the range will be below x-axis, we can always start simulating at this timepoint.
  - I had to add ~.clangd~ config file for eglot to allow ~-std=c++17~ options for syntax checking.
  - Only after doing some coding, I came to the conclusion that after reaching y=0, we need to ensure that we do not shoot past the target and that we need to optimize for highest y0. Since if -y0 < ymin, we will shoot past in one step we should take y0 <= -ymin. We can always choose x0 to be the bare minimum to get into the region.
  - I still am not sure why the equality in ~y0 <= -1*ymin~ is should not be considered.
  - Maybe because y-velocity at y=0, will be -y0-1 and not -y0?
  The answer for the first part is just ~y0*(y0+1)/2~ where ~y0=-1*ymin-1~. For the second part
  - Got to be extremely careful mixing integer and float operations by using ~t*((t-1)/2)~ instead of ~0.5*t*(t-1)~ I introduced a bug that took a lot of time to find.

  <2022-01-18 Tue> Weeded out all inconsitencies for the example case, but still not giving me the correct answer for part2.
  - I am missing something. I tried simulating ~will_strike_fs~ and somehow got few possible cases than direct calculation ~will_strike~.

* TODO Day 18
  I parsed the input data into a tree.
  - Used ~shared_ptr~ for owning the sub-trees and a raw ~*~ pointer for keeping track of parents.
  - We need to traverse the tree structure in depth first way, both forwards and backwards. So ideally an iterator will make writing down the ~explode~ code easier.
    + I could not really write the iterator code, So the ~reduce~ code became exceedingly complicated. Now a few sums are working correctly and a few are not. Debugging process is also becoming complicated.
  - I could not work with ~union~, so I tried ~variant~ and this seems simpler to work with.
  - In code for ~add~, I destroy the input data in the reduction process.
    + This is okay for the first part, since we only ever use a number once to add to the accumulator.
    + For part2 we need to try adding numbers multiple times. So we need to copy construct numbers deeply. I got away with just copying the current node and reusing the rest of the tree for part1.
** TODO  DEEP COPY snailnum
   Get a good solution instead of the hacky re-reading number strings.
